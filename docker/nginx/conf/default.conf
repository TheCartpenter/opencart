# HTTP server
server {
    listen 80;
    listen [::]:80;
    server_name localhost;
    root /var/www/upload;
    index index.php index.html index.htm;

    # Security settings
    autoindex off;
    charset utf-8;

    # Security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), midi=(), sync-xhr=(), microphone=(), camera=(), magnetometer=(), gyroscope=(), payment=()" always;

    # Main location block
    location / {
        try_files $uri $uri/ @opencart;
    }

    # Protect all hidden files and directories (except .well-known for Let's Encrypt etc.)
    location ~ /\.(?!well-known).* {
        deny all;
    }

    # Protect sensitive files by extension
    location ~* /\.(env|key|dockerignore|DS_Store|phpunit|log|ya?ml|sql|db|sqlite|crt|pem|ini|conf|cnf|backup|old|orig|save|swp|tmp|md|tpl|twig)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny direct access to system directory
    location ~ ^/system/ {
        deny all;
        return 404;
    }

    # Deny direct access to storage directory (if moved to web root level)
    location ~ ^/storage/ {
        deny all;
        return 404;
    }

    # Deny direct access to custom storage directory (uncomment and rename if storage is moved and renamed)
    # location ~ ^/my_custom_storage/ {
    #     deny all;
    #     return 404;
    # }

    # Handle OpenCart admin routes with rate limiting (change /admin to your custom admin directory name)
    location /admin {
        limit_req zone=login burst=5 nodelay;
        try_files $uri $uri/ @opencart_admin;
    }

    # Handle OpenCart SEO URLs
    location @opencart {
        rewrite ^/(.+)$ /index.php?_route_=$1&$args last;
    }

    # OpenCart admin rewrite (change /admin/ to your custom admin directory name if renamed)
    location @opencart_admin {
        rewrite ^/admin/(.+)$ /admin/index.php?route=$1&$args last;
    }

    # Handle install directory (should be removed in production)
    location /install/ {
        try_files $uri $uri/ /install/index.php?$args;
    }

    # PHP-FPM configuration with optimizations
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param HTTPS $https if_not_empty;

        # FastCGI optimizations
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        fastcgi_busy_buffers_size 240k;
        fastcgi_temp_file_write_size 256k;
        fastcgi_read_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_connect_timeout 60;
        fastcgi_keep_conn on;
        fastcgi_intercept_errors on;

        # Security headers for PHP files
        add_header X-Content-Type-Options nosniff;
    }

    # Compressible static files (CSS, JS, JSON, SVG)
    location ~* \.(js|css|json|svg)$ {
        expires 30d;
        add_header Cache-Control "public";
        add_header X-Content-Type-Options nosniff;
        add_header Vary "Accept-Encoding";
        access_log off;

        # Enable brotli and gzip for compressible files
        brotli_static on;
        gzip_static on;
    }

    # Compressible static HTML files
    location ~* \.html$ {
        expires 1h;
        add_header Cache-Control "public";
        add_header X-Content-Type-Options nosniff;
        add_header Vary "Accept-Encoding";
        access_log off;

        brotli_static on;
        gzip_static on;
    }

    # Compressible text-based files
    location ~* \.(xml|txt|csv|webmanifest)$ {
        expires 7d;
        add_header Cache-Control "public";
        add_header X-Content-Type-Options nosniff;
        add_header Vary "Accept-Encoding";
        access_log off;

        brotli_static on;
        gzip_static on;
    }

    # Non-compressible static files (images, fonts) - no compression for already compressed formats
    location ~* \.(png|jpg|jpeg|gif|ico|webp|avif|heic|bmp|tiff?|woff|woff2|ttf|eot|otf)$ {
        expires 30d;
        add_header Cache-Control "public";
        add_header X-Content-Type-Options nosniff;
        access_log off;
    }

    # Deny PHP execution in image directories (security measure against malicious uploads)
    location ~* ^/image/.*\.php$ {
        deny all;
        return 404;
    }

    # Handle image cache directory
    location ~* ^/image/cache/ {
        expires 1M;
        add_header Cache-Control "public";
        add_header X-Content-Type-Options nosniff;

        # Serve cached images directly
        try_files $uri =404;
    }

    # Handle catalog image directory (original images and system assets)
    location /image/ {
        expires 1M;
        add_header Cache-Control "public";
        add_header X-Content-Type-Options nosniff;

        # Serve original images, no directory browsing allowed
        try_files $uri =404;
    }

    # robots.txt and favicon.ico
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Handle favicon and Apple touch icons
    location ~* ^/(favicon\.ico|apple-touch-icon.*\.png|android-chrome.*\.png|mstile.*\.png|safari-pinned-tab\.svg|browserconfig\.xml|site\.webmanifest)$ {
        expires 7d;
        add_header Cache-Control "public";
        access_log off;
        log_not_found off;
        try_files $uri =404;
    }

    # Legacy favicon.ico fallback (if not caught by above rule)
    location = /favicon.ico {
        log_not_found off;
        access_log off;
        expires 30d;
    }

    # Custom error pages (only for server-generated errors, not PHP responses)
    error_page 502 503 504 /error.html;
}
